# TCG Card Manager - Project Overview and Requirements

## Project Context
This is a web application for managing trading card game collections, primarily focused on Magic: The Gathering cards. The application allows users to search for cards, view details, add them to inventory, and export the inventory as a CSV file.

## Version Control
- GitHub Repository: https://github.com/DarylSchroeder/TCGCardManager.git
- Branches:
  - main (current)
  - temp_branch

## Recent Changes (July 22, 2025)
1. **Price List Loading Improvements**:
   - Added localStorage support for price lists with fallback to server
   - Added error handling for localStorage quota exceeded
   - Added user feedback for price list loading status

2. **Card Matching Logic Improvements**:
   - Rewrote the findCardInPriceList function to prioritize name matching
   - Added set name mapping between Scryfall and price list
   - Improved fallback mechanisms for set name matching

3. **UI Enhancements**:
   - Added "No pricing information available" message when a card isn't found
   - Added "Update Price List" button for uploading custom price lists
   - Improved error handling and user feedback

## Core Features
1. **Card Search**:
   - Search for cards using the Scryfall API
   - Display search results in a compact list view
   - Select cards to view details

2. **Card Details**:
   - Display card image, name, set, type, rarity, and text
   - Show pricing information from the price list
   - Allow adding cards to inventory with quantity, condition, and price

3. **Inventory Management**:
   - Add cards to inventory with custom quantity, condition, and price
   - View all cards in inventory in a table format
   - Export inventory as a CSV file

4. **Pricing Tool**:
   - Calculate card prices based on TCGplayer pricing rules
   - Support for different card conditions (Near Mint, Lightly Played, etc.)
   - Price calculation based on market price, low price, and shipping

## Technical Implementation
1. **Frontend**:
   - HTML5, CSS3 (Bootstrap 5), and vanilla JavaScript
   - Responsive design for desktop and mobile
   - Two-column layout for search results and card details

2. **Backend**:
   - Node.js local server for serving static files
   - Scryfall API for card data
   - Local CSV price list for pricing information

3. **Data Storage**:
   - In-memory storage for current session
   - localStorage for persisting price lists between sessions
   - CSV export for inventory backup

## Future Enhancements
1. **Improved Data Persistence**:
   - Implement IndexedDB for larger storage capacity
   - Add cloud storage options for inventory

2. **Enhanced Search**:
   - Add advanced search filters (color, type, rarity, etc.)
   - Implement sorting options for search results

3. **Collection Analytics**:
   - Add statistics and charts for collection value
   - Track price history and changes

4. **Bulk Operations**:
   - Import/export features for bulk card management
   - Batch pricing updates
