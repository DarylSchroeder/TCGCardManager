# TCG Card Manager - Project Overview and Requirements

## Project Context
This is a web application for managing trading card game collections, primarily focused on Magic: The Gathering cards. The application allows users to search for cards, view details, add them to inventory, and export the inventory as a CSV file.

## Version Control
- GitHub Repository: https://github.com/DarylSchroeder/TCGCardManager.git
- Branches:
  - main (current)
  - temp_branch
- Recent Commits:
  - Fix price loading for cards like Priest of Titania, improve price list handling
  - Fix search results scrolling with explicit height and overflow settings
  - Fix search results extending behind inventory panel
  - Adjust layout to 60/40 split and optimize for minimal scrolling
  - Implement two-column layout with search results on left and card details on right
  - Update requirements.txt to reflect implemented features
  - Improve pre-fetching functionality with configuration options and better error handling
  - Add User-Agent header to API requests to comply with Scryfall API requirements
- Ignored Files (via .gitignore):
  - Node.js dependencies (node_modules/)
  - Environment variables (.env)
  - Log files
  - OS generated files
  - Backup folder

## Project Structure
- `/root/code/tcg_card_manager/` - Root directory
  - `index.html` - Main HTML file with UI layout
  - `server.js` - Node.js server implementation
  - `app.js` - Main application logic
  - `run.sh` - Script to start the server
  - `/js/` - JavaScript modules directory
    - `api.js` - Handles API calls to Scryfall
    - `ui.js` - Manages UI updates and interactions
    - `inventory.js` - Manages the card inventory
    - `app.js` - Main application initialization
    - `imageCache.js` - Handles caching of card images
  - `AmazonQ.md` - Documentation of recent layout changes

## Recent Changes (July 22, 2025)
1. **Price List Loading Improvements**:
   - Added localStorage support for price lists with fallback to server
   - Added error handling for localStorage quota exceeded
   - Added user feedback for price list loading status

2. **Card Matching Logic Improvements**:
   - Rewrote the findCardInPriceList function to prioritize name matching
   - Added set name mapping between Scryfall and price list
   - Improved fallback mechanisms for set name matching

3. **UI Enhancements**:
   - Added "No pricing information available" message when a card isn't found
   - Added "Update Price List" button for uploading custom price lists
   - Improved error handling and user feedback

4. **Layout Changes**:
   - Implemented a two-column layout with a 60/40 split
   - Search results appear on the left side (60% width)
   - Selected card details appear on the right side (40% width)
   - Inventory table spans both columns at the bottom
   - Fixed height for search and details row (500px)
   - Streamlined inventory table with export button in header

## Core Features
1. Card Search
   - Integration with Scryfall API for comprehensive card data
   - Auto-search when pressing Enter in the search field
   - Display search results in a compact list view with thumbnails
   - Scrollable search results container with fixed height

2. Card Details
   - View high-quality card images
   - Display comprehensive card information
   - Blue header for better visibility
   - Compact form layout for adding cards to inventory
   - Show pricing information from the price list
   - Allow adding cards to inventory with quantity, condition, and price

3. Inventory Management
   - Add cards with quantity, condition, and price information
   - View all cards in inventory in a table format
   - Export inventory as CSV file
   - Streamlined table with export button in header

4. Pricing Tool
   - Calculate card prices based on TCGplayer pricing rules
   - Support for different card conditions (Near Mint, Lightly Played, etc.)
   - Price calculation based on market price, low price, and shipping

## Technical Specifications
- Frontend: HTML5, CSS3 (Bootstrap 5), Vanilla JavaScript
- Backend: Node.js server
- Data Storage: In-memory with localStorage for price lists
- API Integration: Scryfall API (requires User-Agent header)
- Architecture: Modular JavaScript with separation of concerns

## Performance Optimizations
- Pre-fetch popular card images on server start
- Configurable limits to prevent memory issues
- Caching of set data (which changes infrequently)
- Proper error handling for API requests
- Smaller thumbnail images for faster loading
- Graceful fallback when localStorage quota is exceeded

## User Workflow
1. Search for cards by name (e.g., "Counterspell")
2. Select a card from search results to view details
3. Add selected card to inventory with quantity, condition, and price
4. Export inventory as CSV when finished

## Future Enhancements
- Advanced filtering and sorting options
- More detailed card information display
- Bulk import/export features
- Collection statistics and analytics
- Integration with TCGPlayer for price data
- Ability to adjust prices based on market data
- Add sorting options for the search results (by name, set, price, etc.)
- Implement filtering options to narrow down search results
- Add keyboard navigation for the search results list
- Implement a "quick add" button directly in the list view for frequently added cards
- Implement IndexedDB for larger storage capacity
- Add cloud storage options for inventory

## Development Workflow
- We're working on the `main` branch for primary development
- The `temp_branch` exists for experimental features
- Commit changes regularly with descriptive commit messages
- Follow the existing code structure and modular approach
- Test changes locally before committing
- Push to GitHub repository for backup and collaboration

## Metadata Instructions for Amazon Q

### Interaction Preferences
- Provide concise, compact responses focused on key information
- Omit detailed code listings unless specifically requested
- Prioritize actionable insights and recommendations
- Use bullet points for clarity when appropriate

### Development Automation
- Commit code changes automatically after significant modifications
- Use descriptive commit messages that explain the purpose of changes
- Follow the existing commit message style
- No need to ask for permission before committing changes
- No need to show git command outputs unless there are errors

### Code Style Preferences
- Follow existing code style and patterns
- Maintain modular architecture
- Add comments for complex logic
- Prioritize readability and maintainability
- Use consistent naming conventions
